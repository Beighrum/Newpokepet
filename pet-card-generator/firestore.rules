rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Security Event Logs - Admin and system access only
    match /securityEventLogs/{document} {
      // Only allow system/admin writes, no public reads
      allow read, write: if false;
      
      // Allow server-side functions to write security events
      allow create: if request.auth != null && 
        request.auth.token.admin == true ||
        request.auth.token.system == true;
    }
    
    // Audit Logs - Admin and system access only  
    match /auditLogs/{document} {
      // Only allow system/admin writes, no public reads
      allow read, write: if false;
      
      // Allow server-side functions to write audit logs
      allow create: if request.auth != null && 
        request.auth.token.admin == true ||
        request.auth.token.system == true;
    }
    
    // Security Alerts - Admin access only
    match /alerts/{document} {
      // Only allow admin access to security alerts
      allow read, write: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // Security Metrics Cache - System access only
    match /securityMetrics/{document} {
      // Only allow system to read/write metrics cache
      allow read, write: if request.auth != null && 
        request.auth.token.system == true;
    }
    
    // Rate Limit Tracking - System access only
    match /rateLimits/{userId} {
      // Only allow system to manage rate limits
      allow read, write: if request.auth != null && 
        request.auth.token.system == true;
    }
    
    // User Security Profiles - Users can read their own, system can write
    match /userSecurityProfiles/{userId} {
      // Users can read their own security profile
      allow read: if request.auth != null && 
        request.auth.uid == userId;
      
      // Only system can write security profiles
      allow write: if request.auth != null && 
        request.auth.token.system == true;
    }
    
    // Existing pet card rules (preserve existing functionality)
    match /petCards/{document} {
      // Users can read all pet cards
      allow read: if true;
      
      // Users can create/update their own pet cards
      allow create, update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Users can delete their own pet cards
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // User profiles
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
      
      // Public read access for display names and public info
      allow read: if resource.data.isPublic == true;
    }
    
    // Comments on pet cards
    match /comments/{document} {
      // Anyone can read comments
      allow read: if true;
      
      // Authenticated users can create comments
      allow create: if request.auth != null;
      
      // Users can update/delete their own comments
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Social sharing data
    match /socialShares/{document} {
      // Public read access for shared content
      allow read: if true;
      
      // Users can create shares for their own content
      allow create: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Users can update/delete their own shares
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
  }
}