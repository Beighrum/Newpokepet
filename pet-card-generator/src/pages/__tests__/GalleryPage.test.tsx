import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport GalleryPage from '../GalleryPage';\nimport { firestoreService } from '@/services/firestoreService';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card as CardModel } from '@/models/Card';\n\n// Mock dependencies\njest.mock('@/services/firestoreService');\njest.mock('@/hooks/useAuth');\njest.mock('@/components/gallery/CardGrid', () => {\n  return function CardGrid({ cards, loading, onCardClick, onCardFavorite, onCardDelete }: any) {\n    if (loading) return <div>Loading cards...</div>;\n    return (\n      <div data-testid=\"card-grid\">\n        {cards.map((card: CardModel) => (\n          <div key={card.id} data-testid={`card-${card.id}`}>\n            <span>{card.petName}</span>\n            <button onClick={() => onCardClick?.(card)}>View</button>\n            <button onClick={() => onCardFavorite?.(card.id, !card.isFavorite)}>Favorite</button>\n            <button onClick={() => onCardDelete?.(card)}>Delete</button>\n          </div>\n        ))}\n      </div>\n    );\n  };\n});\n\njest.mock('@/components/gallery/GalleryFilters', () => {\n  return function GalleryFilters({ \n    searchTerm, \n    onSearchChange, \n    filters, \n    onFiltersChange,\n    sort,\n    onSortChange \n  }: any) {\n    return (\n      <div data-testid=\"gallery-filters\">\n        <input \n          data-testid=\"search-input\"\n          value={searchTerm}\n          onChange={(e) => onSearchChange(e.target.value)}\n          placeholder=\"Search...\"\n        />\n        <button \n          data-testid=\"filter-rarity\"\n          onClick={() => onFiltersChange({ ...filters, rarity: 'rare' })}\n        >\n          Filter by Rare\n        </button>\n        <button \n          data-testid=\"sort-date\"\n          onClick={() => onSortChange({ field: 'createdAt', direction: 'desc' })}\n        >\n          Sort by Date\n        </button>\n      </div>\n    );\n  };\n});\n\njest.mock('@/components/gallery/CollectionStats', () => {\n  return function CollectionStats({ stats }: any) {\n    return (\n      <div data-testid=\"collection-stats\">\n        <span>Total: {stats?.totalCards || 0}</span>\n        <span>Rare: {stats?.rarityBreakdown?.rare || 0}</span>\n      </div>\n    );\n  };\n});\n\njest.mock('@/components/ui/button', () => ({\n  Button: ({ children, onClick, disabled, className, ...props }: any) => (\n    <button onClick={onClick} disabled={disabled} className={className} {...props}>\n      {children}\n    </button>\n  )\n}));\n\njest.mock('@/components/ui/dialog', () => ({\n  Dialog: ({ children, open }: any) => open ? <div data-testid=\"dialog\">{children}</div> : null,\n  DialogContent: ({ children }: any) => <div>{children}</div>,\n  DialogHeader: ({ children }: any) => <div>{children}</div>,\n  DialogTitle: ({ children }: any) => <h2>{children}</h2>,\n  DialogDescription: ({ children }: any) => <p>{children}</p>,\n  DialogFooter: ({ children }: any) => <div>{children}</div>\n}));\n\njest.mock('@/components/ui/alert', () => ({\n  Alert: ({ children, className }: any) => <div className={className} data-testid=\"alert\">{children}</div>,\n  AlertDescription: ({ children }: any) => <div>{children}</div>\n}));\n\njest.mock('@/lib/utils', () => ({\n  cn: (...classes: any[]) => classes.filter(Boolean).join(' ')\n}));\n\nconst mockUser = {\n  id: 'user-1',\n  email: 'test@example.com',\n  displayName: 'Test User'\n};\n\nconst mockCards: CardModel[] = [\n  {\n    id: 'card-1',\n    userId: 'user-1',\n    petName: 'Fluffy',\n    petType: 'cat',\n    rarity: 'rare',\n    image: {\n      originalUrl: 'https://example.com/original1.jpg',\n      processedUrl: 'https://example.com/processed1.jpg',\n      thumbnailUrl: 'https://example.com/thumb1.jpg',\n      width: 512,\n      height: 512,\n      format: 'jpeg',\n      fileSize: 1024000\n    },\n    stats: {\n      attack: 75,\n      defense: 60,\n      speed: 85,\n      health: 70,\n      totalPower: 290\n    },\n    tags: ['cute', 'fluffy'],\n    isFavorite: false,\n    shareCount: 5,\n    downloadCount: 12,\n    createdAt: Date.now() - 86400000,\n    updatedAt: Date.now()\n  },\n  {\n    id: 'card-2',\n    userId: 'user-1',\n    petName: 'Buddy',\n    petType: 'dog',\n    rarity: 'common',\n    image: {\n      originalUrl: 'https://example.com/original2.jpg',\n      processedUrl: 'https://example.com/processed2.jpg',\n      thumbnailUrl: 'https://example.com/thumb2.jpg',\n      width: 512,\n      height: 512,\n      format: 'jpeg',\n      fileSize: 1024000\n    },\n    stats: {\n      attack: 50,\n      defense: 40,\n      speed: 60,\n      health: 55,\n      totalPower: 205\n    },\n    tags: ['loyal', 'friendly'],\n    isFavorite: true,\n    shareCount: 3,\n    downloadCount: 8,\n    createdAt: Date.now() - 172800000,\n    updatedAt: Date.now()\n  }\n];\n\nconst mockStats = {\n  totalCards: 2,\n  rarityBreakdown: {\n    common: 1,\n    uncommon: 0,\n    rare: 1,\n    epic: 0,\n    legendary: 0,\n    secret_rare: 0\n  },\n  averageFileSize: 1024000,\n  totalFileSize: 2048000,\n  mostUsedPetTypes: [\n    { petType: 'cat', count: 1 },\n    { petType: 'dog', count: 1 }\n  ],\n  recentActivity: [\n    { date: new Date().toISOString(), count: 2 }\n  ]\n};\n\nconst mockFirestoreService = firestoreService as jest.Mocked<typeof firestoreService>;\nconst mockUseAuth = useAuth as jest.MockedFunction<typeof useAuth>;\n\ndescribe('GalleryPage Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    mockUseAuth.mockReturnValue({ user: mockUser } as any);\n    \n    mockFirestoreService.getUserCards.mockResolvedValue({\n      items: mockCards,\n      hasMore: false,\n      lastDoc: null\n    });\n    \n    mockFirestoreService.searchCards.mockResolvedValue({\n      items: mockCards,\n      hasMore: false,\n      lastDoc: null\n    });\n    \n    mockFirestoreService.getCardStatistics.mockResolvedValue(mockStats);\n    mockFirestoreService.updateCard.mockResolvedValue();\n    mockFirestoreService.deleteCard.mockResolvedValue();\n  });\n\n  it('renders gallery page with user cards', async () => {\n    render(<GalleryPage />);\n    \n    expect(screen.getByText('My Gallery')).toBeInTheDocument();\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('card-grid')).toBeInTheDocument();\n      expect(screen.getByText('Fluffy')).toBeInTheDocument();\n      expect(screen.getByText('Buddy')).toBeInTheDocument();\n    });\n    \n    expect(mockFirestoreService.getUserCards).toHaveBeenCalledWith(\n      mockUser.id,\n      expect.objectContaining({\n        pagination: expect.objectContaining({ pageSize: 20 }),\n        filters: {},\n        sort: { field: 'createdAt', direction: 'desc' }\n      })\n    );\n  });\n\n  it('shows loading state initially', () => {\n    render(<GalleryPage />);\n    \n    expect(screen.getByText('Loading cards...')).toBeInTheDocument();\n  });\n\n  it('displays card count in header', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('2 cards in your collection')).toBeInTheDocument();\n    });\n  });\n\n  it('handles search functionality', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('gallery-filters')).toBeInTheDocument();\n    });\n    \n    const searchInput = screen.getByTestId('search-input');\n    await userEvent.type(searchInput, 'Fluffy');\n    \n    await waitFor(() => {\n      expect(mockFirestoreService.searchCards).toHaveBeenCalledWith(\n        mockUser.id,\n        'Fluffy',\n        expect.objectContaining({\n          pagination: expect.objectContaining({ pageSize: 20 }),\n          filters: {}\n        })\n      );\n    });\n  });\n\n  it('handles filter functionality', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('gallery-filters')).toBeInTheDocument();\n    });\n    \n    const filterButton = screen.getByTestId('filter-rarity');\n    await userEvent.click(filterButton);\n    \n    await waitFor(() => {\n      expect(mockFirestoreService.getUserCards).toHaveBeenCalledWith(\n        mockUser.id,\n        expect.objectContaining({\n          filters: { rarity: 'rare' }\n        })\n      );\n    });\n  });\n\n  it('handles sort functionality', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('gallery-filters')).toBeInTheDocument();\n    });\n    \n    const sortButton = screen.getByTestId('sort-date');\n    await userEvent.click(sortButton);\n    \n    await waitFor(() => {\n      expect(mockFirestoreService.getUserCards).toHaveBeenCalledWith(\n        mockUser.id,\n        expect.objectContaining({\n          sort: { field: 'createdAt', direction: 'desc' }\n        })\n      );\n    });\n  });\n\n  it('handles favorite toggle', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('card-grid')).toBeInTheDocument();\n    });\n    \n    const favoriteButton = screen.getAllByText('Favorite')[0];\n    await userEvent.click(favoriteButton);\n    \n    expect(mockFirestoreService.updateCard).toHaveBeenCalledWith(\n      mockUser.id,\n      'card-1',\n      { isFavorite: true }\n    );\n  });\n\n  it('handles card deletion with confirmation', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('card-grid')).toBeInTheDocument();\n    });\n    \n    const deleteButton = screen.getAllByText('Delete')[0];\n    await userEvent.click(deleteButton);\n    \n    // Should show confirmation dialog\n    await waitFor(() => {\n      expect(screen.getByTestId('dialog')).toBeInTheDocument();\n      expect(screen.getByText('Delete Card')).toBeInTheDocument();\n    });\n    \n    // Confirm deletion\n    const confirmButton = screen.getByText('Delete Card');\n    await userEvent.click(confirmButton);\n    \n    expect(mockFirestoreService.deleteCard).toHaveBeenCalledWith(\n      mockUser.id,\n      'card-1'\n    );\n  });\n\n  it('shows collection statistics when stats toggle is enabled', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Stats')).toBeInTheDocument();\n    });\n    \n    const statsButton = screen.getByText('Stats');\n    await userEvent.click(statsButton);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('collection-stats')).toBeInTheDocument();\n      expect(screen.getByText('Total: 2')).toBeInTheDocument();\n      expect(screen.getByText('Rare: 1')).toBeInTheDocument();\n    });\n    \n    expect(mockFirestoreService.getCardStatistics).toHaveBeenCalledWith(mockUser.id);\n  });\n\n  it('handles view mode toggle', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('card-grid')).toBeInTheDocument();\n    });\n    \n    // Should have grid and list view buttons\n    const viewButtons = screen.getAllByRole('button').filter(btn => \n      btn.textContent === '' // Icon buttons\n    );\n    \n    expect(viewButtons.length).toBeGreaterThan(0);\n  });\n\n  it('handles selection mode', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Select')).toBeInTheDocument();\n    });\n    \n    const selectButton = screen.getByText('Select');\n    await userEvent.click(selectButton);\n    \n    // Selection mode should be enabled\n    // This would be tested more thoroughly in the CardGrid component tests\n  });\n\n  it('handles load more functionality', async () => {\n    // Mock hasMore = true\n    mockFirestoreService.getUserCards.mockResolvedValueOnce({\n      items: mockCards,\n      hasMore: true,\n      lastDoc: 'some-doc'\n    });\n    \n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Load More Cards')).toBeInTheDocument();\n    });\n    \n    const loadMoreButton = screen.getByText('Load More Cards');\n    await userEvent.click(loadMoreButton);\n    \n    // Should call getUserCards again with lastDoc\n    await waitFor(() => {\n      expect(mockFirestoreService.getUserCards).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  it('shows error message when API calls fail', async () => {\n    mockFirestoreService.getUserCards.mockRejectedValue(new Error('API Error'));\n    \n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('alert')).toBeInTheDocument();\n      expect(screen.getByText('API Error')).toBeInTheDocument();\n    });\n  });\n\n  it('shows sign-in message when user is not authenticated', () => {\n    mockUseAuth.mockReturnValue({ user: null } as any);\n    \n    render(<GalleryPage />);\n    \n    expect(screen.getByText('Please sign in to view your gallery')).toBeInTheDocument();\n    expect(screen.queryByTestId('card-grid')).not.toBeInTheDocument();\n  });\n\n  it('handles bulk delete operations', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Select')).toBeInTheDocument();\n    });\n    \n    // Enable selection mode\n    const selectButton = screen.getByText('Select');\n    await userEvent.click(selectButton);\n    \n    // This would require more complex mocking of the CardGrid selection\n    // The actual bulk delete functionality is tested in the component\n  });\n\n  it('updates card count when cards are deleted', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('2 cards in your collection')).toBeInTheDocument();\n    });\n    \n    // Delete a card\n    const deleteButton = screen.getAllByText('Delete')[0];\n    await userEvent.click(deleteButton);\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('dialog')).toBeInTheDocument();\n    });\n    \n    const confirmButton = screen.getByText('Delete Card');\n    await userEvent.click(confirmButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('1 card in your collection')).toBeInTheDocument();\n    });\n  });\n\n  it('handles grid column configuration', async () => {\n    render(<GalleryPage />);\n    \n    await waitFor(() => {\n      expect(screen.getByDisplayValue('4')).toBeInTheDocument(); // Default 4 columns\n    });\n    \n    const columnSelect = screen.getByDisplayValue('4');\n    await userEvent.selectOptions(columnSelect, '3');\n    \n    expect(columnSelect).toHaveValue('3');\n  });\n});