import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport GalleryFilters from '../GalleryFilters';\nimport { FilterOptions, SortOptions } from '@/services/firestoreService';\n\n// Mock the UI components\njest.mock('@/components/ui/button', () => ({\n  Button: ({ children, onClick, className, ...props }: any) => (\n    <button onClick={onClick} className={className} {...props}>\n      {children}\n    </button>\n  )\n}));\n\njest.mock('@/components/ui/input', () => ({\n  Input: ({ value, onChange, placeholder, className, ...props }: any) => (\n    <input \n      value={value} \n      onChange={onChange} \n      placeholder={placeholder}\n      className={className}\n      {...props}\n    />\n  )\n}));\n\njest.mock('@/components/ui/label', () => ({\n  Label: ({ children, htmlFor }: any) => (\n    <label htmlFor={htmlFor}>{children}</label>\n  )\n}));\n\njest.mock('@/components/ui/select', () => ({\n  Select: ({ children, value, onValueChange }: any) => (\n    <div data-testid=\"select\" data-value={value}>\n      <button onClick={() => onValueChange('test-value')}>\n        {value || 'Select...'}\n      </button>\n      {children}\n    </div>\n  ),\n  SelectContent: ({ children }: any) => <div>{children}</div>,\n  SelectItem: ({ children, value, onClick }: any) => (\n    <div data-value={value} onClick={() => onClick?.(value)}>\n      {children}\n    </div>\n  ),\n  SelectTrigger: ({ children }: any) => <div>{children}</div>,\n  SelectValue: ({ placeholder }: any) => <span>{placeholder}</span>\n}));\n\njest.mock('@/components/ui/badge', () => ({\n  Badge: ({ children, className }: any) => (\n    <span className={className}>{children}</span>\n  )\n}));\n\njest.mock('@/components/ui/calendar', () => ({\n  Calendar: ({ onSelect, selected }: any) => (\n    <div data-testid=\"calendar\">\n      <button onClick={() => onSelect({ from: new Date(), to: new Date() })}>\n        Select Date Range\n      </button>\n    </div>\n  )\n}));\n\njest.mock('@/components/ui/popover', () => ({\n  Popover: ({ children }: any) => <div>{children}</div>,\n  PopoverContent: ({ children }: any) => <div>{children}</div>,\n  PopoverTrigger: ({ children }: any) => <div>{children}</div>\n}));\n\njest.mock('@/lib/utils', () => ({\n  cn: (...classes: any[]) => classes.filter(Boolean).join(' ')\n}));\n\njest.mock('date-fns', () => ({\n  format: (date: Date, formatStr: string) => date.toLocaleDateString()\n}));\n\ndescribe('GalleryFilters', () => {\n  const defaultProps = {\n    searchTerm: '',\n    onSearchChange: jest.fn(),\n    filters: {} as FilterOptions,\n    onFiltersChange: jest.fn(),\n    sort: { field: 'createdAt', direction: 'desc' } as SortOptions,\n    onSortChange: jest.fn(),\n    availablePetTypes: ['cat', 'dog', 'bird'],\n    availableTags: ['cute', 'fluffy', 'playful', 'loyal'],\n    showAdvanced: false,\n    onToggleAdvanced: jest.fn()\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders search input with correct placeholder', () => {\n    render(<GalleryFilters {...defaultProps} />);\n    \n    const searchInput = screen.getByPlaceholderText('Search by pet name...');\n    expect(searchInput).toBeInTheDocument();\n    expect(searchInput).toHaveValue('');\n  });\n\n  it('handles search input changes', async () => {\n    render(<GalleryFilters {...defaultProps} />);\n    \n    const searchInput = screen.getByPlaceholderText('Search by pet name...');\n    await userEvent.type(searchInput, 'Fluffy');\n    \n    expect(defaultProps.onSearchChange).toHaveBeenCalledWith('F');\n    expect(defaultProps.onSearchChange).toHaveBeenCalledWith('l');\n    // ... and so on for each character\n  });\n\n  it('displays current search term', () => {\n    render(<GalleryFilters {...defaultProps} searchTerm=\"Fluffy\" />);\n    \n    const searchInput = screen.getByPlaceholderText('Search by pet name...');\n    expect(searchInput).toHaveValue('Fluffy');\n  });\n\n  it('renders sort options', () => {\n    render(<GalleryFilters {...defaultProps} />);\n    \n    // Should have sort field and direction selects\n    const selects = screen.getAllByTestId('select');\n    expect(selects.length).toBeGreaterThanOrEqual(2);\n  });\n\n  it('handles sort field changes', async () => {\n    render(<GalleryFilters {...defaultProps} />);\n    \n    const sortSelects = screen.getAllByTestId('select');\n    const sortFieldSelect = sortSelects[0]; // First select should be sort field\n    \n    const button = sortFieldSelect.querySelector('button');\n    if (button) {\n      await userEvent.click(button);\n      expect(defaultProps.onSortChange).toHaveBeenCalled();\n    }\n  });\n\n  it('handles sort direction changes', async () => {\n    render(<GalleryFilters {...defaultProps} />);\n    \n    const sortSelects = screen.getAllByTestId('select');\n    const sortDirectionSelect = sortSelects[1]; // Second select should be sort direction\n    \n    const button = sortDirectionSelect.querySelector('button');\n    if (button) {\n      await userEvent.click(button);\n      expect(defaultProps.onSortChange).toHaveBeenCalled();\n    }\n  });\n\n  it('shows advanced filters when showAdvanced is true', () => {\n    render(<GalleryFilters {...defaultProps} showAdvanced={true} />);\n    \n    expect(screen.getByText('Advanced Filters')).toBeInTheDocument();\n    expect(screen.getByText('Rarity')).toBeInTheDocument();\n    expect(screen.getByText('Pet Type')).toBeInTheDocument();\n    expect(screen.getByText('Favorites')).toBeInTheDocument();\n  });\n\n  it('hides advanced filters when showAdvanced is false', () => {\n    render(<GalleryFilters {...defaultProps} showAdvanced={false} />);\n    \n    expect(screen.queryByText('Advanced Filters')).not.toBeInTheDocument();\n    expect(screen.queryByText('Rarity')).not.toBeInTheDocument();\n  });\n\n  it('toggles advanced filters when toggle button is clicked', async () => {\n    render(<GalleryFilters {...defaultProps} />);\n    \n    const toggleButton = screen.getByRole('button'); // Should be the advanced toggle button\n    await userEvent.click(toggleButton);\n    \n    expect(defaultProps.onToggleAdvanced).toHaveBeenCalled();\n  });\n\n  it('displays active filter count badge', () => {\n    const filtersWithValues = {\n      rarity: 'rare' as const,\n      petType: 'cat',\n      isFavorite: true\n    };\n    \n    render(<GalleryFilters {...defaultProps} filters={filtersWithValues} />);\n    \n    // Should show badge with count of active filters\n    expect(screen.getByText('3')).toBeInTheDocument();\n  });\n\n  it('handles rarity filter changes', async () => {\n    render(<GalleryFilters {...defaultProps} showAdvanced={true} />);\n    \n    // Find rarity select and simulate change\n    const raritySelects = screen.getAllByTestId('select');\n    const raritySelect = raritySelects.find(select => \n      select.textContent?.includes('All Rarities') || \n      select.getAttribute('data-value') === 'all'\n    );\n    \n    if (raritySelect) {\n      const button = raritySelect.querySelector('button');\n      if (button) {\n        await userEvent.click(button);\n        expect(defaultProps.onFiltersChange).toHaveBeenCalled();\n      }\n    }\n  });\n\n  it('handles pet type filter changes', async () => {\n    render(<GalleryFilters {...defaultProps} showAdvanced={true} />);\n    \n    // Similar to rarity filter test\n    const petTypeSelects = screen.getAllByTestId('select');\n    const petTypeSelect = petTypeSelects.find(select => \n      select.textContent?.includes('All Types')\n    );\n    \n    if (petTypeSelect) {\n      const button = petTypeSelect.querySelector('button');\n      if (button) {\n        await userEvent.click(button);\n        expect(defaultProps.onFiltersChange).toHaveBeenCalled();\n      }\n    }\n  });\n\n  it('handles favorites filter changes', async () => {\n    render(<GalleryFilters {...defaultProps} showAdvanced={true} />);\n    \n    const favoritesSelects = screen.getAllByTestId('select');\n    const favoritesSelect = favoritesSelects.find(select => \n      select.textContent?.includes('All Cards')\n    );\n    \n    if (favoritesSelect) {\n      const button = favoritesSelect.querySelector('button');\n      if (button) {\n        await userEvent.click(button);\n        expect(defaultProps.onFiltersChange).toHaveBeenCalled();\n      }\n    }\n  });\n\n  it('displays available pet types in filter', () => {\n    render(<GalleryFilters {...defaultProps} showAdvanced={true} />);\n    \n    expect(screen.getByText('Cat')).toBeInTheDocument();\n    expect(screen.getByText('Dog')).toBeInTheDocument();\n    expect(screen.getByText('Bird')).toBeInTheDocument();\n  });\n\n  it('displays available tags', () => {\n    render(<GalleryFilters {...defaultProps} showAdvanced={true} />);\n    \n    expect(screen.getByText('+ cute')).toBeInTheDocument();\n    expect(screen.getByText('+ fluffy')).toBeInTheDocument();\n    expect(screen.getByText('+ playful')).toBeInTheDocument();\n    expect(screen.getByText('+ loyal')).toBeInTheDocument();\n  });\n\n  it('handles tag addition', async () => {\n    render(<GalleryFilters {...defaultProps} showAdvanced={true} />);\n    \n    const addTagButton = screen.getByText('+ cute');\n    await userEvent.click(addTagButton);\n    \n    expect(defaultProps.onFiltersChange).toHaveBeenCalledWith({\n      tags: ['cute']\n    });\n  });\n\n  it('handles tag removal', async () => {\n    const filtersWithTags = {\n      tags: ['cute', 'fluffy']\n    };\n    \n    render(<GalleryFilters {...defaultProps} filters={filtersWithTags} showAdvanced={true} />);\n    \n    // Should show selected tags with remove buttons\n    expect(screen.getByText('cute')).toBeInTheDocument();\n    expect(screen.getByText('fluffy')).toBeInTheDocument();\n    \n    // Find and click remove button (X icon)\n    const removeButtons = screen.getAllByRole('button').filter(btn => \n      btn.textContent === '' // X icon buttons\n    );\n    \n    if (removeButtons.length > 0) {\n      await userEvent.click(removeButtons[0]);\n      expect(defaultProps.onFiltersChange).toHaveBeenCalledWith({\n        tags: ['fluffy'] // Should remove 'cute'\n      });\n    }\n  });\n\n  it('handles date range selection', async () => {\n    render(<GalleryFilters {...defaultProps} showAdvanced={true} />);\n    \n    const dateRangeButton = screen.getByText('Pick a date range');\n    await userEvent.click(dateRangeButton);\n    \n    // Should show calendar\n    expect(screen.getByTestId('calendar')).toBeInTheDocument();\n    \n    const selectDateButton = screen.getByText('Select Date Range');\n    await userEvent.click(selectDateButton);\n    \n    expect(defaultProps.onFiltersChange).toHaveBeenCalledWith(\n      expect.objectContaining({\n        dateRange: expect.objectContaining({\n          start: expect.any(Number),\n          end: expect.any(Number)\n        })\n      })\n    );\n  });\n\n  it('handles clear all filters', async () => {\n    const filtersWithValues = {\n      rarity: 'rare' as const,\n      petType: 'cat',\n      tags: ['cute']\n    };\n    \n    render(\n      <GalleryFilters \n        {...defaultProps} \n        filters={filtersWithValues} \n        searchTerm=\"Fluffy\"\n        showAdvanced={true} \n      />\n    );\n    \n    const clearButton = screen.getByText('Clear All');\n    await userEvent.click(clearButton);\n    \n    expect(defaultProps.onSearchChange).toHaveBeenCalledWith('');\n    expect(defaultProps.onFiltersChange).toHaveBeenCalledWith({});\n    expect(defaultProps.onSortChange).toHaveBeenCalledWith({\n      field: 'createdAt',\n      direction: 'desc'\n    });\n  });\n\n  it('limits displayed tags to 10', () => {\n    const manyTags = Array.from({ length: 15 }, (_, i) => `tag${i}`);\n    \n    render(\n      <GalleryFilters \n        {...defaultProps} \n        availableTags={manyTags}\n        showAdvanced={true} \n      />\n    );\n    \n    // Should only show first 10 tags\n    expect(screen.getByText('+ tag0')).toBeInTheDocument();\n    expect(screen.getByText('+ tag9')).toBeInTheDocument();\n    expect(screen.queryByText('+ tag10')).not.toBeInTheDocument();\n  });\n\n  it('excludes already selected tags from available tags', () => {\n    const filtersWithTags = {\n      tags: ['cute']\n    };\n    \n    render(\n      <GalleryFilters \n        {...defaultProps} \n        filters={filtersWithTags}\n        showAdvanced={true} \n      />\n    );\n    \n    // 'cute' should not appear in available tags since it's already selected\n    expect(screen.queryByText('+ cute')).not.toBeInTheDocument();\n    expect(screen.getByText('+ fluffy')).toBeInTheDocument();\n  });\n\n  it('displays current filter values correctly', () => {\n    const currentFilters = {\n      rarity: 'rare' as const,\n      petType: 'cat',\n      isFavorite: true\n    };\n    \n    render(\n      <GalleryFilters \n        {...defaultProps} \n        filters={currentFilters}\n        showAdvanced={true} \n      />\n    );\n    \n    // Should show current values in selects\n    const selects = screen.getAllByTestId('select');\n    expect(selects.some(select => select.getAttribute('data-value') === 'rare')).toBeTruthy();\n    expect(selects.some(select => select.getAttribute('data-value') === 'cat')).toBeTruthy();\n  });\n});