import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport CollectionStats from '../CollectionStats';\nimport { RarityLevel } from '@/services/raritySystem';\n\n// Mock the UI components\njest.mock('@/components/ui/card', () => ({\n  Card: ({ children, className }: any) => <div className={className}>{children}</div>,\n  CardContent: ({ children, className }: any) => <div className={className}>{children}</div>,\n  CardHeader: ({ children, className }: any) => <div className={className}>{children}</div>,\n  CardTitle: ({ children, className }: any) => <h3 className={className}>{children}</h3>\n}));\n\njest.mock('@/components/ui/progress', () => ({\n  Progress: ({ value, className }: any) => (\n    <div className={className} data-testid=\"progress\" data-value={value}>\n      <div style={{ width: `${value}%` }} />\n    </div>\n  )\n}));\n\njest.mock('@/components/ui/badge', () => ({\n  Badge: ({ children, className }: any) => (\n    <span className={className}>{children}</span>\n  )\n}));\n\njest.mock('@/components/rarity/RarityBadge', () => {\n  return function RarityBadge({ rarity }: { rarity: RarityLevel }) {\n    return <span data-testid=\"rarity-badge\">{rarity}</span>;\n  };\n});\n\njest.mock('@/lib/utils', () => ({\n  cn: (...classes: any[]) => classes.filter(Boolean).join(' ')\n}));\n\nconst mockStats = {\n  totalCards: 10,\n  rarityBreakdown: {\n    common: 4,\n    uncommon: 3,\n    rare: 2,\n    epic: 1,\n    legendary: 0,\n    secret_rare: 0\n  } as Record<RarityLevel, number>,\n  averageFileSize: 1024000, // 1MB\n  totalFileSize: 10240000, // 10MB\n  mostUsedPetTypes: [\n    { petType: 'cat', count: 4 },\n    { petType: 'dog', count: 3 },\n    { petType: 'bird', count: 2 },\n    { petType: 'fish', count: 1 }\n  ],\n  recentActivity: [\n    { date: '2024-01-15', count: 3 },\n    { date: '2024-01-14', count: 2 },\n    { date: '2024-01-13', count: 1 },\n    { date: '2024-01-12', count: 2 },\n    { date: '2024-01-11', count: 1 },\n    { date: '2024-01-10', count: 1 }\n  ]\n};\n\nconst mockUserStats = {\n  favoriteCards: 3,\n  shareCount: 15,\n  downloadCount: 25,\n  joinDate: Date.now() - (30 * 24 * 60 * 60 * 1000), // 30 days ago\n  lastActive: Date.now() - (2 * 60 * 60 * 1000) // 2 hours ago\n};\n\ndescribe('CollectionStats', () => {\n  const defaultProps = {\n    stats: mockStats\n  };\n\n  it('renders total cards count', () => {\n    render(<CollectionStats {...defaultProps} />);\n    \n    expect(screen.getByText('Total Cards')).toBeInTheDocument();\n    expect(screen.getByText('10')).toBeInTheDocument();\n  });\n\n  it('renders storage information', () => {\n    render(<CollectionStats {...defaultProps} />);\n    \n    expect(screen.getByText('Storage Used')).toBeInTheDocument();\n    expect(screen.getByText('9.77 MB')).toBeInTheDocument(); // 10240000 bytes formatted\n  });\n\n  it('renders user stats when provided', () => {\n    render(<CollectionStats {...defaultProps} userStats={mockUserStats} />);\n    \n    expect(screen.getByText('Favorites')).toBeInTheDocument();\n    expect(screen.getByText('3')).toBeInTheDocument();\n    \n    expect(screen.getByText('Total Shares')).toBeInTheDocument();\n    expect(screen.getByText('15')).toBeInTheDocument();\n  });\n\n  it('displays rarity breakdown with correct percentages', () => {\n    render(<CollectionStats {...defaultProps} showDetailed={true} />);\n    \n    expect(screen.getByText('Rarity Breakdown')).toBeInTheDocument();\n    \n    // Common: 4/10 = 40%\n    expect(screen.getByText('4 (40.0%)')).toBeInTheDocument();\n    \n    // Uncommon: 3/10 = 30%\n    expect(screen.getByText('3 (30.0%)')).toBeInTheDocument();\n    \n    // Rare: 2/10 = 20%\n    expect(screen.getByText('2 (20.0%)')).toBeInTheDocument();\n    \n    // Epic: 1/10 = 10%\n    expect(screen.getByText('1 (10.0%)')).toBeInTheDocument();\n  });\n\n  it('shows progress bars for rarity breakdown', () => {\n    render(<CollectionStats {...defaultProps} showDetailed={true} />);\n    \n    const progressBars = screen.getAllByTestId('progress');\n    \n    // Should have progress bars for non-zero rarities\n    expect(progressBars.length).toBeGreaterThan(0);\n    \n    // Check that progress values are correct\n    const commonProgress = progressBars.find(bar => bar.getAttribute('data-value') === '40');\n    expect(commonProgress).toBeInTheDocument();\n    \n    const uncommonProgress = progressBars.find(bar => bar.getAttribute('data-value') === '30');\n    expect(uncommonProgress).toBeInTheDocument();\n  });\n\n  it('displays most popular pet types', () => {\n    render(<CollectionStats {...defaultProps} showDetailed={true} />);\n    \n    expect(screen.getByText('Most Popular Pet Types')).toBeInTheDocument();\n    \n    expect(screen.getByText('cat')).toBeInTheDocument();\n    expect(screen.getByText('4 (40.0%)')).toBeInTheDocument(); // 4/10 = 40%\n    \n    expect(screen.getByText('dog')).toBeInTheDocument();\n    expect(screen.getByText('3 (30.0%)')).toBeInTheDocument(); // 3/10 = 30%\n    \n    expect(screen.getByText('bird')).toBeInTheDocument();\n    expect(screen.getByText('2 (20.0%)')).toBeInTheDocument(); // 2/10 = 20%\n  });\n\n  it('limits pet types display to top 5', () => {\n    const statsWithManyPetTypes = {\n      ...mockStats,\n      mostUsedPetTypes: [\n        { petType: 'cat', count: 4 },\n        { petType: 'dog', count: 3 },\n        { petType: 'bird', count: 2 },\n        { petType: 'fish', count: 1 },\n        { petType: 'hamster', count: 1 },\n        { petType: 'rabbit', count: 1 }\n      ]\n    };\n    \n    render(<CollectionStats stats={statsWithManyPetTypes} showDetailed={true} />);\n    \n    expect(screen.getByText('cat')).toBeInTheDocument();\n    expect(screen.getByText('dog')).toBeInTheDocument();\n    expect(screen.getByText('bird')).toBeInTheDocument();\n    expect(screen.getByText('fish')).toBeInTheDocument();\n    expect(screen.getByText('hamster')).toBeInTheDocument();\n    expect(screen.queryByText('rabbit')).not.toBeInTheDocument(); // Should be limited to 5\n  });\n\n  it('displays recent activity', () => {\n    render(<CollectionStats {...defaultProps} showDetailed={true} />);\n    \n    expect(screen.getByText('Recent Activity')).toBeInTheDocument();\n    \n    // Should show formatted dates and card counts\n    expect(screen.getByText('3 cards')).toBeInTheDocument();\n    expect(screen.getByText('2 cards')).toBeInTheDocument();\n    expect(screen.getByText('1 card')).toBeInTheDocument(); // Singular form\n  });\n\n  it('limits recent activity to 7 days', () => {\n    const statsWithManyDays = {\n      ...mockStats,\n      recentActivity: Array.from({ length: 10 }, (_, i) => ({\n        date: `2024-01-${15 - i}`,\n        count: i + 1\n      }))\n    };\n    \n    render(<CollectionStats stats={statsWithManyDays} showDetailed={true} />);\n    \n    // Should only show first 7 entries\n    expect(screen.getByText('1 card')).toBeInTheDocument();\n    expect(screen.getByText('7 cards')).toBeInTheDocument();\n    expect(screen.queryByText('8 cards')).not.toBeInTheDocument();\n  });\n\n  it('displays account information when user stats provided', () => {\n    render(<CollectionStats {...defaultProps} userStats={mockUserStats} showDetailed={true} />);\n    \n    expect(screen.getByText('Account Information')).toBeInTheDocument();\n    expect(screen.getByText('Member since:')).toBeInTheDocument();\n    expect(screen.getByText('Days active:')).toBeInTheDocument();\n    expect(screen.getByText('Last active:')).toBeInTheDocument();\n    expect(screen.getByText('Total downloads:')).toBeInTheDocument();\n  });\n\n  it('calculates days since join correctly', () => {\n    render(<CollectionStats {...defaultProps} userStats={mockUserStats} showDetailed={true} />);\n    \n    // Should show approximately 30 days (might be 29 or 30 depending on exact timing)\n    const daysText = screen.getByText(/^(29|30)$/);\n    expect(daysText).toBeInTheDocument();\n  });\n\n  it('calculates cards per day correctly', () => {\n    render(<CollectionStats {...defaultProps} userStats={mockUserStats} showDetailed={true} />);\n    \n    // 10 cards over ~30 days = ~0.3 cards per day\n    expect(screen.getByText('0.3')).toBeInTheDocument();\n  });\n\n  it('formats file sizes correctly', () => {\n    render(<CollectionStats {...defaultProps} />);\n    \n    // Average file size: 1024000 bytes = 0.98 MB\n    expect(screen.getByText('0.98 MB')).toBeInTheDocument();\n    \n    // Total file size: 10240000 bytes = 9.77 MB\n    expect(screen.getByText('9.77 MB')).toBeInTheDocument();\n  });\n\n  it('handles zero file size correctly', () => {\n    const statsWithZeroSize = {\n      ...mockStats,\n      averageFileSize: 0,\n      totalFileSize: 0\n    };\n    \n    render(<CollectionStats stats={statsWithZeroSize} />);\n    \n    expect(screen.getByText('0 Bytes')).toBeInTheDocument();\n  });\n\n  it('shows empty state when no cards exist', () => {\n    const emptyStats = {\n      totalCards: 0,\n      rarityBreakdown: {\n        common: 0,\n        uncommon: 0,\n        rare: 0,\n        epic: 0,\n        legendary: 0,\n        secret_rare: 0\n      } as Record<RarityLevel, number>,\n      averageFileSize: 0,\n      totalFileSize: 0,\n      mostUsedPetTypes: [],\n      recentActivity: []\n    };\n    \n    render(<CollectionStats stats={emptyStats} showDetailed={true} />);\n    \n    expect(screen.getByText('No cards in collection yet')).toBeInTheDocument();\n  });\n\n  it('hides detailed sections when showDetailed is false', () => {\n    render(<CollectionStats {...defaultProps} showDetailed={false} />);\n    \n    expect(screen.queryByText('Rarity Breakdown')).not.toBeInTheDocument();\n    expect(screen.queryByText('Most Popular Pet Types')).not.toBeInTheDocument();\n    expect(screen.queryByText('Recent Activity')).not.toBeInTheDocument();\n  });\n\n  it('filters out zero-count rarities from breakdown', () => {\n    render(<CollectionStats {...defaultProps} showDetailed={true} />);\n    \n    // Should show rarities with counts > 0\n    expect(screen.getByText('Common')).toBeInTheDocument();\n    expect(screen.getByText('Uncommon')).toBeInTheDocument();\n    expect(screen.getByText('Rare')).toBeInTheDocument();\n    expect(screen.getByText('Epic')).toBeInTheDocument();\n    \n    // Should not show rarities with count = 0\n    expect(screen.queryByText('Legendary')).not.toBeInTheDocument();\n    expect(screen.queryByText('Secret Rare')).not.toBeInTheDocument();\n  });\n\n  it('sorts rarity breakdown by count descending', () => {\n    render(<CollectionStats {...defaultProps} showDetailed={true} />);\n    \n    const rarityElements = screen.getAllByTestId('rarity-badge');\n    \n    // Should be sorted: common (4), uncommon (3), rare (2), epic (1)\n    expect(rarityElements[0]).toHaveTextContent('common');\n    expect(rarityElements[1]).toHaveTextContent('uncommon');\n    expect(rarityElements[2]).toHaveTextContent('rare');\n    expect(rarityElements[3]).toHaveTextContent('epic');\n  });\n\n  it('handles singular vs plural forms correctly', () => {\n    const statsWithSingular = {\n      ...mockStats,\n      recentActivity: [\n        { date: '2024-01-15', count: 1 }\n      ]\n    };\n    \n    render(<CollectionStats stats={statsWithSingular} showDetailed={true} />);\n    \n    expect(screen.getByText('1 card')).toBeInTheDocument(); // Singular\n    expect(screen.queryByText('1 cards')).not.toBeInTheDocument(); // Should not be plural\n  });\n});