import React, { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Share2, 
  Copy, 
  Download, 
  Facebook, 
  Twitter, 
  Instagram,\n  Link,\n  Mail,\n  MessageCircle,\n  Check,\n  ExternalLink,\n  QrCode\n} from 'lucide-react';\nimport { Card as CardModel } from '@/models/Card';\nimport { cn } from '@/lib/utils';\n\ninterface ShareCardProps {\n  card: CardModel;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onDownload?: (card: CardModel, format?: 'original' | 'processed' | 'thumbnail') => void;\n  className?: string;\n}\n\nconst ShareCard: React.FC<ShareCardProps> = ({\n  card,\n  open,\n  onOpenChange,\n  onDownload,\n  className = ''\n}) => {\n  const [copied, setCopied] = useState<string | null>(null);\n  const [customMessage, setCustomMessage] = useState('');\n  const [shareUrl, setShareUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Generate share URL (this would typically be a public URL to view the card)\n  const generateShareUrl = useCallback(() => {\n    // In a real app, this would generate a public URL\n    const baseUrl = window.location.origin;\n    return `${baseUrl}/cards/${card.id}`;\n  }, [card.id]);\n\n  // Initialize share URL when dialog opens\n  React.useEffect(() => {\n    if (open) {\n      setShareUrl(generateShareUrl());\n      setCustomMessage(`Check out my awesome ${card.petType} card: ${card.petName}!`);\n    }\n  }, [open, generateShareUrl, card.petType, card.petName]);\n\n  // Handle copy to clipboard\n  const handleCopy = useCallback(async (text: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(type);\n      setTimeout(() => setCopied(null), 2000);\n    } catch (err) {\n      console.error('Failed to copy:', err);\n      setError('Failed to copy to clipboard');\n    }\n  }, []);\n\n  // Handle social media sharing\n  const handleSocialShare = useCallback((platform: string) => {\n    const encodedUrl = encodeURIComponent(shareUrl);\n    const encodedMessage = encodeURIComponent(customMessage);\n    \n    let shareLink = '';\n    \n    switch (platform) {\n      case 'twitter':\n        shareLink = `https://twitter.com/intent/tweet?text=${encodedMessage}&url=${encodedUrl}`;\n        break;\n      case 'facebook':\n        shareLink = `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`;\n        break;\n      case 'linkedin':\n        shareLink = `https://www.linkedin.com/sharing/share-offsite/?url=${encodedUrl}`;\n        break;\n      case 'reddit':\n        shareLink = `https://reddit.com/submit?url=${encodedUrl}&title=${encodedMessage}`;\n        break;\n      case 'whatsapp':\n        shareLink = `https://wa.me/?text=${encodedMessage}%20${encodedUrl}`;\n        break;\n      case 'telegram':\n        shareLink = `https://t.me/share/url?url=${encodedUrl}&text=${encodedMessage}`;\n        break;\n      default:\n        return;\n    }\n    \n    window.open(shareLink, '_blank', 'width=600,height=400');\n  }, [shareUrl, customMessage]);\n\n  // Handle email sharing\n  const handleEmailShare = useCallback(() => {\n    const subject = encodeURIComponent(`Check out my ${card.petType} card: ${card.petName}`);\n    const body = encodeURIComponent(`${customMessage}\\n\\n${shareUrl}`);\n    window.location.href = `mailto:?subject=${subject}&body=${body}`;\n  }, [card.petType, card.petName, customMessage, shareUrl]);\n\n  // Handle native sharing (if supported)\n  const handleNativeShare = useCallback(async () => {\n    if (!navigator.share) {\n      setError('Native sharing not supported on this device');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      await navigator.share({\n        title: `${card.petName} - Pet Card`,\n        text: customMessage,\n        url: shareUrl\n      });\n    } catch (err) {\n      if ((err as Error).name !== 'AbortError') {\n        console.error('Error sharing:', err);\n        setError('Failed to share');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [card.petName, customMessage, shareUrl]);\n\n  // Handle download\n  const handleDownload = useCallback((format: 'original' | 'processed' | 'thumbnail' = 'processed') => {\n    onDownload?.(card, format);\n  }, [card, onDownload]);\n\n  const socialPlatforms = [\n    { name: 'Twitter', icon: Twitter, key: 'twitter', color: 'text-blue-400' },\n    { name: 'Facebook', icon: Facebook, key: 'facebook', color: 'text-blue-600' },\n    { name: 'WhatsApp', icon: MessageCircle, key: 'whatsapp', color: 'text-green-500' },\n    { name: 'Telegram', icon: MessageCircle, key: 'telegram', color: 'text-blue-500' },\n    { name: 'Reddit', icon: Share2, key: 'reddit', color: 'text-orange-500' },\n    { name: 'LinkedIn', icon: Share2, key: 'linkedin', color: 'text-blue-700' }\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className={cn('max-w-md', className)}>\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <Share2 className=\"w-5 h-5 mr-2\" />\n            Share {card.petName}\n          </DialogTitle>\n          <DialogDescription>\n            Share your awesome pet card with friends and family!\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Error Alert */}\n          {error && (\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertDescription className=\"text-red-800\">\n                {error}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setError(null)}\n                  className=\"ml-2 h-auto p-0 text-red-600 hover:text-red-700\"\n                >\n                  Dismiss\n                </Button>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Custom Message */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"message\">Custom Message</Label>\n            <Textarea\n              id=\"message\"\n              value={customMessage}\n              onChange={(e) => setCustomMessage(e.target.value)}\n              placeholder=\"Add a personal message...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Share URL */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"shareUrl\">Share Link</Label>\n            <div className=\"flex space-x-2\">\n              <Input\n                id=\"shareUrl\"\n                value={shareUrl}\n                readOnly\n                className=\"flex-1\"\n              />\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleCopy(shareUrl, 'url')}\n                className=\"px-3\"\n              >\n                {copied === 'url' ? (\n                  <Check className=\"h-4 w-4 text-green-500\" />\n                ) : (\n                  <Copy className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          {/* Social Media Platforms */}\n          <div className=\"space-y-3\">\n            <Label>Share on Social Media</Label>\n            <div className=\"grid grid-cols-3 gap-2\">\n              {socialPlatforms.map((platform) => {\n                const Icon = platform.icon;\n                return (\n                  <Button\n                    key={platform.key}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleSocialShare(platform.key)}\n                    className=\"flex items-center justify-center space-x-2 h-10\"\n                  >\n                    <Icon className={cn('h-4 w-4', platform.color)} />\n                    <span className=\"text-xs\">{platform.name}</span>\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Other Sharing Options */}\n          <div className=\"space-y-2\">\n            <Label>Other Options</Label>\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleEmailShare}\n                className=\"flex-1\"\n              >\n                <Mail className=\"h-4 w-4 mr-2\" />\n                Email\n              </Button>\n              \n              {navigator.share && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleNativeShare}\n                  disabled={loading}\n                  className=\"flex-1\"\n                >\n                  <Share2 className=\"h-4 w-4 mr-2\" />\n                  {loading ? 'Sharing...' : 'Share'}\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Download Options */}\n          {onDownload && (\n            <div className=\"space-y-2\">\n              <Label>Download Card</Label>\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleDownload('processed')}\n                  className=\"flex-1\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  High Quality\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleDownload('thumbnail')}\n                  className=\"flex-1\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Thumbnail\n                </Button>\n              </div>\n              {card.image.originalUrl && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleDownload('original')}\n                  className=\"w-full\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Original Image\n                </Button>\n              )}\n            </div>\n          )}\n\n          {/* Quick Actions */}\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleCopy(`${customMessage} ${shareUrl}`, 'full')}\n              className=\"flex-1\"\n            >\n              {copied === 'full' ? (\n                <Check className=\"h-4 w-4 mr-2 text-green-500\" />\n              ) : (\n                <Copy className=\"h-4 w-4 mr-2\" />\n              )}\n              Copy All\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => window.open(shareUrl, '_blank')}\n              className=\"flex-1\"\n            >\n              <ExternalLink className=\"h-4 w-4 mr-2\" />\n              Preview\n            </Button>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Close\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default ShareCard;