import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport PetCard from '../PetCard';\nimport { Card as CardModel } from '@/models/Card';\n\n// Mock the UI components\njest.mock('@/components/ui/button', () => ({\n  Button: ({ children, onClick, className, ...props }: any) => (\n    <button onClick={onClick} className={className} {...props}>\n      {children}\n    </button>\n  )\n}));\n\njest.mock('@/components/ui/badge', () => ({\n  Badge: ({ children, className }: any) => (\n    <span className={className}>{children}</span>\n  )\n}));\n\njest.mock('@/components/ui/dropdown-menu', () => ({\n  DropdownMenu: ({ children }: any) => <div>{children}</div>,\n  DropdownMenuContent: ({ children }: any) => <div>{children}</div>,\n  DropdownMenuItem: ({ children, onClick }: any) => (\n    <div onClick={onClick}>{children}</div>\n  ),\n  DropdownMenuSeparator: () => <hr />,\n  DropdownMenuTrigger: ({ children }: any) => <div>{children}</div>\n}));\n\njest.mock('@/components/rarity/RarityBadge', () => {\n  return function RarityBadge({ rarity }: { rarity: string }) {\n    return <span data-testid=\"rarity-badge\">{rarity}</span>;\n  };\n});\n\njest.mock('@/lib/utils', () => ({\n  cn: (...classes: any[]) => classes.filter(Boolean).join(' ')\n}));\n\nconst mockCard: CardModel = {\n  id: 'test-card-1',\n  userId: 'user-1',\n  petName: 'Fluffy',\n  petType: 'cat',\n  rarity: 'rare',\n  image: {\n    originalUrl: 'https://example.com/original.jpg',\n    processedUrl: 'https://example.com/processed.jpg',\n    thumbnailUrl: 'https://example.com/thumbnail.jpg',\n    width: 512,\n    height: 512,\n    format: 'jpeg',\n    fileSize: 1024000\n  },\n  stats: {\n    attack: 75,\n    defense: 60,\n    speed: 85,\n    health: 70,\n    totalPower: 290\n  },\n  tags: ['cute', 'fluffy', 'playful'],\n  isFavorite: false,\n  shareCount: 5,\n  downloadCount: 12,\n  createdAt: Date.now() - 86400000, // 1 day ago\n  updatedAt: Date.now(),\n  animation: {\n    enabled: true,\n    type: 'bounce',\n    duration: 1000,\n    animatedUrl: 'https://example.com/animated.gif'\n  }\n};\n\ndescribe('PetCard', () => {\n  const defaultProps = {\n    card: mockCard\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders card with basic information', () => {\n    render(<PetCard {...defaultProps} />);\n    \n    expect(screen.getByText('Fluffy')).toBeInTheDocument();\n    expect(screen.getByText('cat')).toBeInTheDocument();\n    expect(screen.getByTestId('rarity-badge')).toHaveTextContent('rare');\n  });\n\n  it('displays card image with correct alt text', () => {\n    render(<PetCard {...defaultProps} />);\n    \n    const image = screen.getByAltText('Fluffy - cat');\n    expect(image).toBeInTheDocument();\n    expect(image).toHaveAttribute('src', mockCard.image.processedUrl);\n  });\n\n  it('shows animation when enabled and playing', () => {\n    render(<PetCard {...defaultProps} showAnimation={true} />);\n    \n    const image = screen.getByAltText('Fluffy - cat');\n    expect(image).toHaveAttribute('src', mockCard.animation!.animatedUrl);\n  });\n\n  it('shows GIF badge when animation is enabled', () => {\n    render(<PetCard {...defaultProps} />);\n    \n    expect(screen.getByText('GIF')).toBeInTheDocument();\n  });\n\n  it('displays battle stats when showStats is true', () => {\n    render(<PetCard {...defaultProps} showStats={true} />);\n    \n    expect(screen.getByText('75')).toBeInTheDocument(); // Attack\n    expect(screen.getByText('60')).toBeInTheDocument(); // Defense\n    expect(screen.getByText('85')).toBeInTheDocument(); // Speed\n    expect(screen.getByText('70')).toBeInTheDocument(); // Health\n    expect(screen.getByText('ATK')).toBeInTheDocument();\n    expect(screen.getByText('DEF')).toBeInTheDocument();\n    expect(screen.getByText('SPD')).toBeInTheDocument();\n    expect(screen.getByText('HP')).toBeInTheDocument();\n  });\n\n  it('displays tags when size is not small', () => {\n    render(<PetCard {...defaultProps} size=\"md\" />);\n    \n    expect(screen.getByText('cute')).toBeInTheDocument();\n    expect(screen.getByText('fluffy')).toBeInTheDocument();\n    expect(screen.getByText('playful')).toBeInTheDocument();\n  });\n\n  it('limits tags display and shows count for extra tags', () => {\n    const cardWithManyTags = {\n      ...mockCard,\n      tags: ['tag1', 'tag2', 'tag3', 'tag4', 'tag5', 'tag6']\n    };\n    \n    render(<PetCard card={cardWithManyTags} size=\"md\" />);\n    \n    expect(screen.getByText('tag1')).toBeInTheDocument();\n    expect(screen.getByText('tag2')).toBeInTheDocument();\n    expect(screen.getByText('tag3')).toBeInTheDocument();\n    expect(screen.getByText('+3')).toBeInTheDocument();\n  });\n\n  it('calls onClick when card is clicked', async () => {\n    const handleClick = jest.fn();\n    render(<PetCard {...defaultProps} onClick={handleClick} />);\n    \n    const card = screen.getByText('Fluffy').closest('div');\n    await userEvent.click(card!);\n    \n    expect(handleClick).toHaveBeenCalledWith(mockCard);\n  });\n\n  it('handles favorite toggle', async () => {\n    const handleFavorite = jest.fn();\n    render(<PetCard {...defaultProps} onFavorite={handleFavorite} />);\n    \n    // Find and click the favorite button (heart icon)\n    const favoriteButton = screen.getByRole('button');\n    await userEvent.click(favoriteButton);\n    \n    expect(handleFavorite).toHaveBeenCalledWith(mockCard.id, true);\n  });\n\n  it('shows favorite button as active when card is favorited', () => {\n    const favoritedCard = { ...mockCard, isFavorite: true };\n    render(<PetCard card={favoritedCard} />);\n    \n    // The heart should have fill-current class when favorited\n    const heartIcon = screen.getByRole('button').querySelector('svg');\n    expect(heartIcon).toHaveClass('fill-current');\n  });\n\n  it('handles selection when selectable is true', async () => {\n    const handleSelectionChange = jest.fn();\n    render(\n      <PetCard \n        {...defaultProps} \n        selectable={true} \n        selected={false}\n        onSelectionChange={handleSelectionChange}\n      />\n    );\n    \n    const checkbox = screen.getByRole('checkbox');\n    await userEvent.click(checkbox);\n    \n    expect(handleSelectionChange).toHaveBeenCalledWith(true);\n  });\n\n  it('shows selection checkbox when selectable is true', () => {\n    render(<PetCard {...defaultProps} selectable={true} />);\n    \n    expect(screen.getByRole('checkbox')).toBeInTheDocument();\n  });\n\n  it('applies selected styling when selected is true', () => {\n    render(<PetCard {...defaultProps} selectable={true} selected={true} />);\n    \n    const cardElement = screen.getByText('Fluffy').closest('div');\n    expect(cardElement).toHaveClass('ring-2', 'ring-blue-500', 'ring-offset-2');\n  });\n\n  it('handles animation toggle', async () => {\n    render(<PetCard {...defaultProps} showAnimation={true} />);\n    \n    // Initially should show animated version\n    const image = screen.getByAltText('Fluffy - cat');\n    expect(image).toHaveAttribute('src', mockCard.animation!.animatedUrl);\n    \n    // Find and click the animation toggle button\n    const toggleButton = screen.getAllByRole('button').find(btn => \n      btn.querySelector('svg')\n    );\n    \n    if (toggleButton) {\n      await userEvent.click(toggleButton);\n      \n      // Should now show static version\n      await waitFor(() => {\n        expect(image).toHaveAttribute('src', mockCard.image.processedUrl);\n      });\n    }\n  });\n\n  it('displays share count and download count', () => {\n    render(<PetCard {...defaultProps} showStats={true} />);\n    \n    expect(screen.getByText('5')).toBeInTheDocument(); // Share count\n    expect(screen.getByText('12')).toBeInTheDocument(); // Download count\n  });\n\n  it('displays creation date', () => {\n    render(<PetCard {...defaultProps} showStats={true} />);\n    \n    const yesterday = new Date(mockCard.createdAt).toLocaleDateString();\n    expect(screen.getByText(yesterday)).toBeInTheDocument();\n  });\n\n  it('handles image loading states', () => {\n    render(<PetCard {...defaultProps} />);\n    \n    const image = screen.getByAltText('Fluffy - cat');\n    \n    // Initially should be loading\n    expect(image).toHaveClass('opacity-0');\n    \n    // Simulate image load\n    fireEvent.load(image);\n    \n    expect(image).toHaveClass('opacity-100');\n  });\n\n  it('handles image error state', () => {\n    render(<PetCard {...defaultProps} />);\n    \n    const image = screen.getByAltText('Fluffy - cat');\n    \n    // Simulate image error\n    fireEvent.error(image);\n    \n    expect(screen.getByText('Image not available')).toBeInTheDocument();\n  });\n\n  it('applies different size configurations', () => {\n    const { rerender } = render(<PetCard {...defaultProps} size=\"sm\" />);\n    \n    let cardElement = screen.getByText('Fluffy').closest('div');\n    expect(cardElement).toHaveClass('w-48');\n    \n    rerender(<PetCard {...defaultProps} size=\"lg\" />);\n    \n    cardElement = screen.getByText('Fluffy').closest('div');\n    expect(cardElement).toHaveClass('w-80');\n  });\n\n  it('hides stats for small size', () => {\n    render(<PetCard {...defaultProps} size=\"sm\" showStats={true} />);\n    \n    // Should not show individual battle stats for small size\n    expect(screen.queryByText('ATK')).not.toBeInTheDocument();\n    expect(screen.queryByText('DEF')).not.toBeInTheDocument();\n  });\n\n  it('hides tags for small size', () => {\n    render(<PetCard {...defaultProps} size=\"sm\" />);\n    \n    expect(screen.queryByText('cute')).not.toBeInTheDocument();\n    expect(screen.queryByText('fluffy')).not.toBeInTheDocument();\n  });\n});