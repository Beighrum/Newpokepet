import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport CardDetailView from '../CardDetailView';\nimport { Card as CardModel } from '@/models/Card';\n\n// Mock the UI components\njest.mock('@/components/ui/button', () => ({\n  Button: ({ children, onClick, className, ...props }: any) => (\n    <button onClick={onClick} className={className} {...props}>\n      {children}\n    </button>\n  )\n}));\n\njest.mock('@/components/ui/badge', () => ({\n  Badge: ({ children, className }: any) => (\n    <span className={className}>{children}</span>\n  )\n}));\n\njest.mock('@/components/ui/card', () => ({\n  Card: ({ children, className }: any) => <div className={className}>{children}</div>,\n  CardContent: ({ children, className }: any) => <div className={className}>{children}</div>,\n  CardHeader: ({ children, className }: any) => <div className={className}>{children}</div>,\n  CardTitle: ({ children, className }: any) => <h3 className={className}>{children}</h3>\n}));\n\njest.mock('@/components/ui/separator', () => ({\n  Separator: () => <hr />\n}));\n\njest.mock('@/components/ui/dialog', () => ({\n  Dialog: ({ children, open }: any) => open ? <div data-testid=\"dialog\">{children}</div> : null,\n  DialogContent: ({ children }: any) => <div>{children}</div>,\n  DialogHeader: ({ children }: any) => <div>{children}</div>,\n  DialogTitle: ({ children }: any) => <h2>{children}</h2>\n}));\n\njest.mock('@/components/rarity/RarityBadge', () => {\n  return function RarityBadge({ rarity }: { rarity: string }) {\n    return <span data-testid=\"rarity-badge\">{rarity}</span>;\n  };\n});\n\njest.mock('@/lib/utils', () => ({\n  cn: (...classes: any[]) => classes.filter(Boolean).join(' ')\n}));\n\n// Mock clipboard API\nObject.assign(navigator, {\n  clipboard: {\n    writeText: jest.fn(() => Promise.resolve())\n  }\n});\n\nconst mockCard: CardModel = {\n  id: 'test-card-1',\n  userId: 'user-1',\n  petName: 'Fluffy',\n  petType: 'cat',\n  rarity: 'rare',\n  image: {\n    originalUrl: 'https://example.com/original.jpg',\n    processedUrl: 'https://example.com/processed.jpg',\n    thumbnailUrl: 'https://example.com/thumbnail.jpg',\n    width: 512,\n    height: 512,\n    format: 'jpeg',\n    fileSize: 1024000\n  },\n  stats: {\n    attack: 75,\n    defense: 60,\n    speed: 85,\n    health: 70,\n    totalPower: 290\n  },\n  tags: ['cute', 'fluffy', 'playful'],\n  isFavorite: false,\n  shareCount: 5,\n  downloadCount: 12,\n  createdAt: Date.now() - 86400000, // 1 day ago\n  updatedAt: Date.now(),\n  animation: {\n    enabled: true,\n    type: 'bounce',\n    duration: 1000,\n    animatedUrl: 'https://example.com/animated.gif'\n  }\n};\n\ndescribe('CardDetailView', () => {\n  const defaultProps = {\n    card: mockCard,\n    open: true,\n    onOpenChange: jest.fn()\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders when open is true', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    expect(screen.getByTestId('dialog')).toBeInTheDocument();\n    expect(screen.getByText('Fluffy')).toBeInTheDocument();\n  });\n\n  it('does not render when open is false', () => {\n    render(<CardDetailView {...defaultProps} open={false} />);\n    \n    expect(screen.queryByTestId('dialog')).not.toBeInTheDocument();\n  });\n\n  it('displays pet information correctly', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    expect(screen.getByText('Fluffy')).toBeInTheDocument();\n    expect(screen.getByText('cat')).toBeInTheDocument();\n    expect(screen.getByTestId('rarity-badge')).toHaveTextContent('rare');\n  });\n\n  it('displays battle stats', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    expect(screen.getByText('75')).toBeInTheDocument(); // Attack\n    expect(screen.getByText('60')).toBeInTheDocument(); // Defense\n    expect(screen.getByText('85')).toBeInTheDocument(); // Speed\n    expect(screen.getByText('70')).toBeInTheDocument(); // Health\n    expect(screen.getByText('Attack')).toBeInTheDocument();\n    expect(screen.getByText('Defense')).toBeInTheDocument();\n    expect(screen.getByText('Speed')).toBeInTheDocument();\n    expect(screen.getByText('Health')).toBeInTheDocument();\n  });\n\n  it('displays image details', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    expect(screen.getByText('512 Ã— 512')).toBeInTheDocument();\n    expect(screen.getByText('0.98 MB')).toBeInTheDocument(); // 1024000 bytes\n    expect(screen.getByText('JPEG')).toBeInTheDocument();\n  });\n\n  it('displays animation details when animation is enabled', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    expect(screen.getByText('BOUNCE')).toBeInTheDocument();\n    expect(screen.getByText('1000ms')).toBeInTheDocument();\n  });\n\n  it('displays tags', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    expect(screen.getByText('cute')).toBeInTheDocument();\n    expect(screen.getByText('fluffy')).toBeInTheDocument();\n    expect(screen.getByText('playful')).toBeInTheDocument();\n  });\n\n  it('displays metadata information', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    expect(screen.getByText('5')).toBeInTheDocument(); // Share count\n    expect(screen.getByText('12')).toBeInTheDocument(); // Download count\n    expect(screen.getByText('test-card-1')).toBeInTheDocument(); // Card ID\n  });\n\n  it('handles favorite toggle', async () => {\n    const handleFavorite = jest.fn();\n    render(<CardDetailView {...defaultProps} onFavorite={handleFavorite} />);\n    \n    const favoriteButton = screen.getAllByRole('button').find(btn => \n      btn.querySelector('svg')\n    );\n    \n    if (favoriteButton) {\n      await userEvent.click(favoriteButton);\n      expect(handleFavorite).toHaveBeenCalledWith(mockCard.id, true);\n    }\n  });\n\n  it('handles share action', async () => {\n    const handleShare = jest.fn();\n    render(<CardDetailView {...defaultProps} onShare={handleShare} />);\n    \n    const shareButton = screen.getAllByRole('button').find(btn => \n      btn.querySelector('svg')\n    );\n    \n    if (shareButton) {\n      await userEvent.click(shareButton);\n      expect(handleShare).toHaveBeenCalledWith(mockCard);\n    }\n  });\n\n  it('handles download action', async () => {\n    const handleDownload = jest.fn();\n    render(<CardDetailView {...defaultProps} onDownload={handleDownload} />);\n    \n    const downloadButton = screen.getAllByRole('button').find(btn => \n      btn.querySelector('svg')\n    );\n    \n    if (downloadButton) {\n      await userEvent.click(downloadButton);\n      expect(handleDownload).toHaveBeenCalledWith(mockCard);\n    }\n  });\n\n  it('handles edit action', async () => {\n    const handleEdit = jest.fn();\n    render(<CardDetailView {...defaultProps} onEdit={handleEdit} />);\n    \n    const editButton = screen.getAllByRole('button').find(btn => \n      btn.querySelector('svg')\n    );\n    \n    if (editButton) {\n      await userEvent.click(editButton);\n      expect(handleEdit).toHaveBeenCalledWith(mockCard);\n    }\n  });\n\n  it('handles animation toggle', async () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    const image = screen.getByAltText('Fluffy - cat');\n    \n    // Initially should show animated version\n    expect(image).toHaveAttribute('src', mockCard.animation!.animatedUrl);\n    \n    // Find and click the pause button\n    const pauseButton = screen.getAllByRole('button').find(btn => \n      btn.querySelector('svg')\n    );\n    \n    if (pauseButton) {\n      await userEvent.click(pauseButton);\n      \n      // Should now show static version\n      await waitFor(() => {\n        expect(image).toHaveAttribute('src', mockCard.image.processedUrl);\n      });\n    }\n  });\n\n  it('handles copy to clipboard', async () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    // Find copy button for pet name\n    const copyButtons = screen.getAllByRole('button').filter(btn => \n      btn.querySelector('svg')\n    );\n    \n    if (copyButtons.length > 0) {\n      await userEvent.click(copyButtons[0]);\n      \n      expect(navigator.clipboard.writeText).toHaveBeenCalledWith('Fluffy');\n    }\n  });\n\n  it('shows check icon after successful copy', async () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    const copyButtons = screen.getAllByRole('button').filter(btn => \n      btn.querySelector('svg')\n    );\n    \n    if (copyButtons.length > 0) {\n      await userEvent.click(copyButtons[0]);\n      \n      // Should show check icon temporarily\n      await waitFor(() => {\n        const checkIcon = screen.getByRole('button').querySelector('svg');\n        expect(checkIcon).toHaveClass('text-green-500');\n      });\n    }\n  });\n\n  it('handles image loading states', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    const image = screen.getByAltText('Fluffy - cat');\n    \n    // Simulate image load\n    fireEvent.load(image);\n    \n    // Should not show loading spinner after load\n    expect(screen.queryByText('Loading')).not.toBeInTheDocument();\n  });\n\n  it('handles image error state', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    const image = screen.getByAltText('Fluffy - cat');\n    \n    // Simulate image error\n    fireEvent.error(image);\n    \n    expect(screen.getByText('Image not available')).toBeInTheDocument();\n  });\n\n  it('opens external links', async () => {\n    // Mock window.open\n    const mockOpen = jest.fn();\n    Object.defineProperty(window, 'open', {\n      value: mockOpen,\n      writable: true\n    });\n    \n    render(<CardDetailView {...defaultProps} />);\n    \n    const originalImageButton = screen.getByText('View Original Image');\n    await userEvent.click(originalImageButton);\n    \n    expect(mockOpen).toHaveBeenCalledWith(mockCard.image.originalUrl, '_blank');\n  });\n\n  it('formats dates correctly', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    // Should display formatted creation and update dates\n    const createdDate = new Date(mockCard.createdAt).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    expect(screen.getByText(createdDate)).toBeInTheDocument();\n  });\n\n  it('calculates total power correctly', () => {\n    render(<CardDetailView {...defaultProps} />);\n    \n    const totalPower = mockCard.stats.attack + mockCard.stats.defense + \n                      mockCard.stats.speed + mockCard.stats.health;\n    \n    expect(screen.getByText(totalPower.toString())).toBeInTheDocument();\n  });\n\n  it('shows favorite button as active when card is favorited', () => {\n    const favoritedCard = { ...mockCard, isFavorite: true };\n    render(<CardDetailView card={favoritedCard} open={true} onOpenChange={jest.fn()} />);\n    \n    const favoriteButton = screen.getAllByRole('button').find(btn => \n      btn.classList.contains('text-red-500')\n    );\n    \n    expect(favoriteButton).toBeInTheDocument();\n  });\n\n  it('does not show animation controls when animation is disabled', () => {\n    const cardWithoutAnimation = {\n      ...mockCard,\n      animation: { ...mockCard.animation!, enabled: false }\n    };\n    \n    render(<CardDetailView card={cardWithoutAnimation} open={true} onOpenChange={jest.fn()} />);\n    \n    // Should not show animation controls\n    expect(screen.queryByText('BOUNCE')).not.toBeInTheDocument();\n    expect(screen.queryByText('1000ms')).not.toBeInTheDocument();\n  });\n});