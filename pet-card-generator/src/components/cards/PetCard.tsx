import React, { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Heart, 
  Share2, 
  Download, 
  MoreVertical, 
  Eye,
  Edit,
  Trash2,
  Star,
  Play,
  Pause
} from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Card as CardModel } from '@/models/Card';
import RarityBadge from '@/components/rarity/RarityBadge';
import { cn } from '@/lib/utils';

interface PetCardProps {
  card: CardModel;
  onClick?: (card: CardModel) => void;
  onFavorite?: (cardId: string, isFavorite: boolean) => void;
  onShare?: (card: CardModel) => void;
  onDownload?: (card: CardModel) => void;
  onEdit?: (card: CardModel) => void;
  onDelete?: (card: CardModel) => void;
  onView?: (card: CardModel) => void;
  className?: string;
  size?: 'sm' | 'md' | 'lg';
  showActions?: boolean;
  showStats?: boolean;
  showAnimation?: boolean;
  selectable?: boolean;
  selected?: boolean;
  onSelectionChange?: (selected: boolean) => void;
}\n\nconst PetCard: React.FC<PetCardProps> = ({\n  card,\n  onClick,\n  onFavorite,\n  onShare,\n  onDownload,\n  onEdit,\n  onDelete,\n  onView,\n  className = '',\n  size = 'md',\n  showActions = true,\n  showStats = true,\n  showAnimation = true,\n  selectable = false,\n  selected = false,\n  onSelectionChange\n}) => {\n  const [imageLoading, setImageLoading] = useState(true);\n  const [imageError, setImageError] = useState(false);\n  const [animationPlaying, setAnimationPlaying] = useState(true);\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Size configurations\n  const sizeConfig = {\n    sm: {\n      container: 'w-48',\n      image: 'h-32',\n      title: 'text-sm',\n      subtitle: 'text-xs',\n      stats: 'text-xs',\n      padding: 'p-2'\n    },\n    md: {\n      container: 'w-64',\n      image: 'h-48',\n      title: 'text-base',\n      subtitle: 'text-sm',\n      stats: 'text-sm',\n      padding: 'p-3'\n    },\n    lg: {\n      container: 'w-80',\n      image: 'h-64',\n      title: 'text-lg',\n      subtitle: 'text-base',\n      stats: 'text-base',\n      padding: 'p-4'\n    }\n  }[size];\n\n  // Handle image events\n  const handleImageLoad = useCallback(() => {\n    setImageLoading(false);\n    setImageError(false);\n  }, []);\n\n  const handleImageError = useCallback(() => {\n    setImageLoading(false);\n    setImageError(true);\n  }, []);\n\n  // Handle favorite toggle\n  const handleFavoriteToggle = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    onFavorite?.(card.id, !card.isFavorite);\n  }, [card.id, card.isFavorite, onFavorite]);\n\n  // Handle animation toggle\n  const handleAnimationToggle = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    setAnimationPlaying(!animationPlaying);\n  }, [animationPlaying]);\n\n  // Handle selection\n  const handleSelectionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n    onSelectionChange?.(e.target.checked);\n  }, [onSelectionChange]);\n\n  // Calculate total power\n  const totalPower = card.stats.attack + card.stats.defense + card.stats.speed + card.stats.health;\n\n  // Determine image source\n  const imageSrc = showAnimation && animationPlaying && card.animation?.enabled ? \n    card.animation.animatedUrl : card.image.processedUrl;\n\n  return (\n    <div\n      className={cn(\n        'group relative bg-white rounded-lg shadow-sm border transition-all duration-200 cursor-pointer',\n        'hover:shadow-md hover:scale-[1.02]',\n        selected && 'ring-2 ring-blue-500 ring-offset-2',\n        sizeConfig.container,\n        className\n      )}\n      onClick={() => onClick?.(card)}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {/* Selection checkbox */}\n      {selectable && (\n        <div className=\"absolute top-2 left-2 z-10\">\n          <input\n            type=\"checkbox\"\n            checked={selected}\n            onChange={handleSelectionChange}\n            className=\"w-4 h-4 text-blue-600 bg-white border-gray-300 rounded focus:ring-blue-500\"\n          />\n        </div>\n      )}\n\n      {/* Card Image */}\n      <div className={cn('relative overflow-hidden rounded-t-lg bg-gray-100', sizeConfig.image)}>\n        {imageLoading && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100\">\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-gray-600\" />\n          </div>\n        )}\n        \n        {imageError ? (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100 text-gray-400\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl mb-1\">üñºÔ∏è</div>\n              <div className=\"text-xs\">Image not available</div>\n            </div>\n          </div>\n        ) : (\n          <img\n            src={imageSrc}\n            alt={`${card.petName} - ${card.petType}`}\n            className={cn(\n              'w-full h-full object-cover transition-opacity duration-200',\n              imageLoading ? 'opacity-0' : 'opacity-100'\n            )}\n            loading=\"lazy\"\n            onLoad={handleImageLoad}\n            onError={handleImageError}\n          />\n        )}\n\n        {/* Rarity Badge */}\n        <div className=\"absolute top-2 right-2\">\n          <RarityBadge \n            rarity={card.rarity} \n            size={size === 'sm' ? 'xs' : 'sm'} \n            showGlow={true}\n          />\n        </div>\n\n        {/* Animation Controls */}\n        {showAnimation && card.animation?.enabled && (\n          <div className={cn(\n            'absolute bottom-2 left-2 transition-opacity duration-200',\n            isHovered ? 'opacity-100' : 'opacity-0'\n          )}>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={handleAnimationToggle}\n              className=\"h-6 w-6 p-0 bg-white/80 backdrop-blur-sm hover:bg-white\"\n            >\n              {animationPlaying ? (\n                <Pause className=\"h-3 w-3\" />\n              ) : (\n                <Play className=\"h-3 w-3\" />\n              )}\n            </Button>\n          </div>\n        )}\n\n        {/* Favorite Button */}\n        <button\n          onClick={handleFavoriteToggle}\n          className={cn(\n            'absolute bottom-2 right-2 p-1.5 rounded-full transition-all duration-200',\n            'bg-white/80 backdrop-blur-sm hover:bg-white',\n            'opacity-0 group-hover:opacity-100',\n            card.isFavorite && 'opacity-100 text-red-500'\n          )}\n        >\n          <Heart \n            className={cn(\n              'w-4 h-4 transition-colors',\n              card.isFavorite ? 'fill-current text-red-500' : 'text-gray-600 hover:text-red-500'\n            )}\n          />\n        </button>\n\n        {/* GIF indicator */}\n        {card.animation?.enabled && (\n          <div className=\"absolute top-2 left-2\">\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              GIF\n            </Badge>\n          </div>\n        )}\n      </div>\n\n      {/* Card Content */}\n      <div className={sizeConfig.padding}>\n        <div className=\"flex items-start justify-between mb-2\">\n          <div className=\"flex-1 min-w-0\">\n            <h3 className={cn('font-semibold text-gray-900 truncate', sizeConfig.title)}>\n              {card.petName}\n            </h3>\n            <p className={cn('text-gray-500 capitalize truncate', sizeConfig.subtitle)}>\n              {card.petType}\n            </p>\n          </div>\n          \n          {showActions && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {onView && (\n                  <DropdownMenuItem onClick={(e) => {\n                    e.stopPropagation();\n                    onView(card);\n                  }}>\n                    <Eye className=\"mr-2 h-4 w-4\" />\n                    View Details\n                  </DropdownMenuItem>\n                )}\n                {onEdit && (\n                  <DropdownMenuItem onClick={(e) => {\n                    e.stopPropagation();\n                    onEdit(card);\n                  }}>\n                    <Edit className=\"mr-2 h-4 w-4\" />\n                    Edit Card\n                  </DropdownMenuItem>\n                )}\n                {onShare && (\n                  <DropdownMenuItem onClick={(e) => {\n                    e.stopPropagation();\n                    onShare(card);\n                  }}>\n                    <Share2 className=\"mr-2 h-4 w-4\" />\n                    Share\n                  </DropdownMenuItem>\n                )}\n                {onDownload && (\n                  <DropdownMenuItem onClick={(e) => {\n                    e.stopPropagation();\n                    onDownload(card);\n                  }}>\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Download\n                  </DropdownMenuItem>\n                )}\n                {onDelete && (\n                  <>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem \n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onDelete(card);\n                      }}\n                      className=\"text-red-600 focus:text-red-600\"\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Delete\n                    </DropdownMenuItem>\n                  </>\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n\n        {/* Card Stats */}\n        {showStats && (\n          <div className=\"flex items-center justify-between text-xs text-gray-500 mb-2\">\n            <div className=\"flex items-center space-x-3\">\n              <span className=\"flex items-center\">\n                <Star className=\"w-3 h-3 mr-1\" />\n                {totalPower}\n              </span>\n              <span className=\"flex items-center\">\n                <Share2 className=\"w-3 h-3 mr-1\" />\n                {card.shareCount}\n              </span>\n              <span className=\"flex items-center\">\n                <Download className=\"w-3 h-3 mr-1\" />\n                {card.downloadCount}\n              </span>\n            </div>\n            \n            <span>\n              {new Date(card.createdAt).toLocaleDateString()}\n            </span>\n          </div>\n        )}\n\n        {/* Battle Stats */}\n        {showStats && size !== 'sm' && (\n          <div className=\"grid grid-cols-4 gap-1 mb-2\">\n            <div className=\"text-center\">\n              <div className={cn('font-bold text-red-500', sizeConfig.stats)}>\n                {card.stats.attack}\n              </div>\n              <div className=\"text-xs text-gray-500\">ATK</div>\n            </div>\n            <div className=\"text-center\">\n              <div className={cn('font-bold text-blue-500', sizeConfig.stats)}>\n                {card.stats.defense}\n              </div>\n              <div className=\"text-xs text-gray-500\">DEF</div>\n            </div>\n            <div className=\"text-center\">\n              <div className={cn('font-bold text-green-500', sizeConfig.stats)}>\n                {card.stats.speed}\n              </div>\n              <div className=\"text-xs text-gray-500\">SPD</div>\n            </div>\n            <div className=\"text-center\">\n              <div className={cn('font-bold text-purple-500', sizeConfig.stats)}>\n                {card.stats.health}\n              </div>\n              <div className=\"text-xs text-gray-500\">HP</div>\n            </div>\n          </div>\n        )}\n\n        {/* Tags */}\n        {card.tags.length > 0 && size !== 'sm' && (\n          <div className=\"flex flex-wrap gap-1\">\n            {card.tags.slice(0, size === 'lg' ? 5 : 3).map((tag, index) => (\n              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n            {card.tags.length > (size === 'lg' ? 5 : 3) && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{card.tags.length - (size === 'lg' ? 5 : 3)}\n              </Badge>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PetCard;